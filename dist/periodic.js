"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase = require("firebase/app");
require("firebase/auth");
const Discord = require("discord.js");
const MSG_ = require("./textos");
const users_1 = require("./users");
function FnPeriodic(client) {
    return __awaiter(this, void 0, void 0, function* () {
        loadKMPFCMD(client);
        yield firebase.auth().signInWithEmailAndPassword('kmpf@discordbot.com', String(Math.abs((Number(client.user.id)) * (Number(client.guilds.find((g_) => g_.name == 'KMPF').id))))).then(() => { console.log('BOT DB Connected'); }).catch(Err => { console.log(Err); });
        client.user.setPresence({ status: 'online', game: { name: 'kmpf help para ayuda' } });
        setInterval(() => { changeFuhrer(client); }, 60000 * 5);
        CoronlesKMPFRoles(client);
        users_1.kickUsuario('asdasdasd', client);
    });
}
exports.FnPeriodic = FnPeriodic;
function loadKMPFCMD(client) {
    return __awaiter(this, void 0, void 0, function* () {
        client.channels.get(MSG_.kmpfMSG.kmpfroles.MC).fetchMessages({ limit: 4 }).then((messages) => { messages.forEach((msg) => { msg.delete(); }); }).catch(console.error);
        for (let t_ of MSG_.kmpfMSG.kmpfroles.Arr) {
            let embedMSG = new Discord.RichEmbed().setTitle(t_.titulo).setDescription(t_.desc), emojiArr = new Array(0);
            for (let d_ of t_.data) {
                if (d_.emoji != '') {
                    embedMSG.addField(d_.emoji + ' ➽ ' + d_.texto, d_.desc, false);
                    emojiArr.push(d_.emoji);
                }
                else {
                    embedMSG.addField(d_.texto, d_.desc, false);
                }
            }
            client.channels.get(MSG_.kmpfMSG.kmpfroles.MC).send(embedMSG).then((sendEmbed) => { if (emojiArr.length > 0) {
                for (let e_ of emojiArr) {
                    sendEmbed.react(String(e_));
                }
            } });
        }
        let embedMSGGame = new Discord.RichEmbed().setTitle('_**JUEGOS**_'), emojiArr = new Array(0);
        for (let d_ of MSG_.juegos) {
            embedMSGGame.addField(String(client.emojis.get(d_.EID)) + ' ➽ ' + d_.nombre, d_.code, false);
            emojiArr.push(d_.EID);
        }
        client.channels.get(MSG_.kmpfMSG.kmpfroles.MC).send(embedMSGGame).then((sendEmbed) => { if (emojiArr.length > 0) {
            for (let e_ of emojiArr) {
                sendEmbed.react(String(e_));
            }
        } });
    });
}
function changeFuhrer(client) {
    firebase.database().ref('/fuhrer').on('value', snap => {
        let fuhrerDat = snap.val(), coroneles = fuhrerDat.coroneles, pos = fuhrerDat.nmbWeek, next = pos + 1;
        if (fuhrerDat.nmbWeek < getWeekNumber()) {
            let cntFuhrer = fuhrerDat.coroneles.length;
            if (next < cntFuhrer) {
                const oldFuhrer = client.guilds.find((g) => g.id == '451837050618904577').members.find((u) => u.id == coroneles[pos].uid);
                oldFuhrer.members.find((u) => { u.removeRole('521184706142797834'); });
                if (coroneles[next].vac) {
                    for (let i = next;; i++) {
                        if (i + 1 >= cntFuhrer) {
                            i = 0;
                        }
                        if (coroneles[i] == coroneles[next])
                            break;
                        else if (!(coroneles[i].vac)) {
                            const newFuhrer = client.guilds.find((g) => g.id == '451837050618904577').members.find((u) => u.id == coroneles[i].uid);
                            newFuhrer.addRole('521184706142797834');
                            firebase.database().ref('/fuhrer').update({ nmbWeek: new Date() });
                            break;
                        }
                    }
                }
            }
        }
    });
}
function CoronlesKMPFRoles(client) {
    client.channels.get(MSG_.kmpfMSG.kmpfCoroneles.MC).fetchMessages({ limit: 3 }).then((messages) => { messages.forEach((msg) => { msg.delete(); }); }).catch(console.error);
    for (let t_ of MSG_.kmpfMSG.kmpfCoroneles.Arr) {
        let embedMSG = new Discord.RichEmbed().setTitle(t_.titulo).setDescription(t_.desc), emojiArr = new Array(0);
        for (let d_ of t_.data) {
            if (d_.emoji != '') {
                embedMSG.addField(d_.emoji + ' ➽ ' + d_.texto, d_.desc, false);
                emojiArr.push(d_.emoji);
            }
            else {
                embedMSG.addField(d_.texto, d_.desc, false);
            }
        }
        client.channels.get(MSG_.kmpfMSG.kmpfCoroneles.MC).send(embedMSG).then((sendEmbed) => { if (emojiArr.length > 0) {
            for (let e_ of emojiArr) {
                sendEmbed.react(String(e_));
            }
        } });
    }
}
function getWeekNumber() {
    let d = new Date(Date.UTC(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()));
    let dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    let yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}
//# sourceMappingURL=data:application/json;base64,