"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const firebase = require("firebase/app");
require("firebase/auth");
const Discord = require("discord.js");
const textos_1 = require("./textos");
let minute_ = 2.5, inac = 20, inacRep = 3;
function FnPeriodic(client) {
    return __awaiter(this, void 0, void 0, function* () {
        newMemMsg(client);
        loadKMPFCMD(client);
        CoronlesKMPFRoles(client);
        yield firebase.auth().signInWithEmailAndPassword('kmpf@discordbot.com', String(Math.abs((Number(client.user.id)) * (Number(client.guilds.find((g_) => g_.name == 'KMPF').id))))).then(() => { console.log('BOT DB Connected'); }).catch(Err => { console.log(Err); });
        client.user.setPresence({ status: 'online', game: { name: '_kmpf help_ para ayuda' } });
        setInterval(() => {
            changeFuhrer(client);
        }, 60000 * minute_);
    });
}
exports.FnPeriodic = FnPeriodic;
function loadKMPFCMD(client) {
    return __awaiter(this, void 0, void 0, function* () {
        client.channels.get(textos_1.kmpfMSG.kmpfroles.MC).fetchMessages({ limit: 4 }).then((messages) => { messages.forEach((msg) => { msg.delete(); }); }).catch(console.error);
        for (let t_ of textos_1.kmpfMSG.kmpfroles.Arr) {
            let embedMSG = new Discord.RichEmbed().setTitle(t_.titulo).setDescription(t_.desc), emojiArr = new Array(0);
            for (let d_ of t_.data) {
                if (d_.emoji != '') {
                    embedMSG.addField(d_.emoji + ' ➽ ' + d_.texto, d_.desc, false);
                    emojiArr.push(d_.emoji);
                }
                else {
                    embedMSG.addField(d_.texto, d_.desc, false);
                }
            }
            client.channels.get(textos_1.kmpfMSG.kmpfroles.MC).send(embedMSG).then((sendEmbed) => { if (emojiArr.length > 0) {
                for (let e_ of emojiArr) {
                    sendEmbed.react(String(e_));
                }
            } });
        }
    });
}
function newMemMsg(client) {
    return __awaiter(this, void 0, void 0, function* () {
        client.channels.get(textos_1.kmpfMSG.kmpfrules.MC).fetchMessages({ limit: 1 }).then((messages) => { messages.forEach((msg) => { msg.delete(); }); }).catch(console.error);
        let msg = new Discord.RichEmbed, rules_ = textos_1.kmpfMSG.kmpfrules.Arr[0], emojiArr = new Array(0);
        msg.setTitle(rules_.titulo);
        msg.setDescription(rules_.desc);
        for (let rule of rules_.data) {
            msg.addField(rule.texto, rule.desc);
            if (rule.emoji != '-')
                emojiArr.push(rule.emoji);
        }
        client.channels.get(textos_1.kmpfMSG.kmpfrules.MC).send(msg).then((sendEmbed) => { if (emojiArr.length > 0) {
            for (let e_ of emojiArr) {
                sendEmbed.react(String(e_));
            }
        } });
    });
}
function changeFuhrer(client) {
    firebase.database().ref('/fuhrer').on('value', snap => {
        let fuhrerDat = snap.val(), coroneles = fuhrerDat.coroneles, pos = fuhrerDat.nmbWeek, next = pos + 1;
        if (fuhrerDat.nmbWeek < getWeekNumber()) {
            let cntFuhrer = fuhrerDat.coroneles.length;
            const oldFuhrer = client.guilds.find((g) => g.id == '451837050618904577').members.find((u) => u.id == coroneles[pos].uid);
            oldFuhrer.members.find((u) => { u.removeRole('521184706142797834'); });
            if (coroneles[next].vac) {
                for (let i = next;; i++) {
                    if (coroneles[i] == coroneles[pos])
                        break;
                    else if (!(coroneles[i].vac)) {
                        const newFuhrer = client.guilds.find((g) => g.id == '451837050618904577').members.find((u) => u.id == coroneles[i].uid);
                        newFuhrer.addRole('521184706142797834');
                        firebase.database().ref('/fuhrer').update({ nmbWeek: new Date() });
                        break;
                    }
                    if (i >= cntFuhrer) {
                        i = 0;
                    }
                }
            }
        }
    });
}
function checkIfAFK(client) {
    firebase.database().ref('/users').on('value', snapshot => {
        snapshot.forEach(user => {
            if (user.val().connect.laston != new Date(0)) {
                let dayDif = getDayOfYear(user.val().connect.laston);
                if (dayDif >= inac && dayDif < inac + inac) {
                    console.log("HOLA, ENTRE");
                }
                else if (dayDif >= inac && dayDif < inac + inac) {
                    console.log("HOLA, ENTRE");
                }
                else if (dayDif >= inac && dayDif < inac + inac) {
                    console.log("HOLA, ENTRE");
                }
            }
        });
    });
}
function CoronlesKMPFRoles(client) {
    client.channels.get(textos_1.kmpfMSG.kmpfCoroneles.MC).fetchMessages({ limit: 3 }).then((messages) => { messages.forEach((msg) => { msg.delete(); }); }).catch(console.error);
    for (let t_ of textos_1.kmpfMSG.kmpfCoroneles.Arr) {
        let embedMSG = new Discord.RichEmbed().setTitle(t_.titulo).setDescription(t_.desc), emojiArr = new Array(0);
        for (let d_ of t_.data) {
            if (d_.emoji != '') {
                embedMSG.addField(d_.emoji + ' ➽ ' + d_.texto, d_.desc, false);
                emojiArr.push(d_.emoji);
            }
            else {
                embedMSG.addField(d_.texto, d_.desc, false);
            }
        }
        client.channels.get(textos_1.kmpfMSG.kmpfCoroneles.MC).send(embedMSG).then((sendEmbed) => { if (emojiArr.length > 0) {
            for (let e_ of emojiArr) {
                sendEmbed.react(String(e_));
            }
        } });
    }
}
function getWeekNumber() {
    let d = new Date(Date.UTC(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()));
    let dayNum = d.getUTCDay() || 7;
    d.setUTCDate(d.getUTCDate() + 4 - dayNum);
    let yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
    return Math.ceil((((d - yearStart) / 86400000) + 1) / 7);
}
function getDayOfYear(inDate) {
    let start = new Date(inDate);
    console.log(start);
    let now = new Date();
    let diff = now - start;
    let oneDay = 1000 * 60 * 60 * 24;
    let day = Math.floor(diff / oneDay);
    console.log('Day of year: ' + day);
    return day;
}
function profileExists(client) {
}
//# sourceMappingURL=data:application/json;base64,